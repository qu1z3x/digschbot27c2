
		
let conferenceData = [];
let feedbacksConf = [];

		{
								text: "–î–µ–ª–µ–≥–∞—Ç—ã üéì",
								callback_data: "conferencedatalist",
							},
			
			


			//! –§–£–ù–ö–¶–ò–û–ù–ê–õ –î–õ–Ø –ó–ê–ü–ò–°–ò –ù–ê –ö–û–ù–§–ï–†–ï–ù–¶–ò–Æ –§–£–ù–ö–¶–ò–ò
			
			async function RegistryUsersData(chatId, listNum) {
	try {
		let text = "";

		const dataAboutUser = usersData.find((obj) => obj.chatId === chatId);
		
		if (listNum == 2) {
			let countConf = 0;
			for (let i = 0; i < conferenceData.length; i++) {
				if (conferenceData[i].registrationIsDone) {
					text += `[${i + 1}] <code>${conferenceData[i].lastName} ${
						conferenceData[i].firstName
					} ${conferenceData[i].middleName}</code>\n‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å:  <code>${
						conferenceData[i].careerName
					}</code>\n‚Ä¢ –†–µ–≥–∏–æ–Ω:  <code>${
						conferenceData[i].region
					}</code>\n‚Ä¢ –ì–æ—Ä–æ–¥:  <code>${
						conferenceData[i].city
					}</code>\n‚Ä¢ –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ:  <code>${
						conferenceData[i].institution
					}</code>\n‚Ä¢ –ü–æ—á—Ç–∞:  <code>${conferenceData[i].mail}</code>\n\n`;
					countConf++;
				}
			}

			bot.editMessageText(
				`<b><i>üéì –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ü§†</i>\n\n${
					countConf > 0
						? `–ö–ª–∏–∫–æ–º –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–∞‚ùó\n\n<i>–î–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö:\n\n${text}</i>–í—Å–µ–≥–æ: ${countConf}`
						: "–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ üèùÔ∏è"
				}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId === chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "–ü—Ä–æ–π—Ç–∏ ü™™",
									callback_data: "startofregistration",
								},
								{
									text: "–û—Ç–∑—ã–≤—ã üì©",
									callback_data: "feedbacksconflist",
								},
							],

							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
								{
									text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è",
									callback_data: "conferencedatalist",
								},
							],
						],
					},
				}
			);
		} else if (listNum == 3) {
			let countConf = 0;
			for (let i = 0; i < feedbacksConf.length; i++) {
				text += `[${i + 1}] ${feedbacksConf[i].firstName}\n${
					feedbacksConf[i].text
				}\n\n`;
				countConf++;
			}

			bot.editMessageText(
				`<b><i>üßë‚Äçüè´ –û—Ç–∑—ã–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üì©\n\n${text}</i>–í—Å–µ–≥–æ: ${countConf}</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId === chatId)
						.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
									callback_data: "conferencedatalist",
								},
								{
									text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è",
									callback_data: "conferencedatalist",
								},
							],
						],
					},
				}
			);
		}
		}}

async function startConference(chatId, firstName) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);

	let rndNum = Math.floor(Math.random() * stickers.length);
	const dateNowHHNN = `${String(new Date().getHours()).padStart(
		2,
		"0"
	)}:${String(new Date().getMinutes()).padStart(2, "0")}`;
	if (dateNowHHNN < "12:00" && dateNowHHNN >= "06:00")
		textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < "17:00" && dateNowHHNN >= "12:00")
		textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < "22:00" && dateNowHHNN >= "17:00")
		textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= "22:00" || dateNowHHNN < "6:00")
		textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	try {
		await bot.sendSticker(chatId, stickers[rndNum]);

		await bot.sendMessage(
			chatId,
			`*${textToSayHello}, ${firstName}\\! [‚úåÔ∏è](https://t.me/${BotName}/?start=minidetail1)*`,
			{
				parse_mode: "MarkdownV2",
				disable_web_page_preview: true,
			}
		);

		await bot.sendMessage(chatId, `„Ö§`).then((message) => {
			dataAboutConferenceUsers.messageId = message.message_id;
		});
		startOfRegistration(chatId);
	} catch (error) {
		console.log(error);
	}
}

async function menuConf(chatId, createMessage) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);

	try {
		dataAboutConferenceUsers.actionInBot = 1;
		if (
			(!createMessage && dataAboutConferenceUsers.registrationIsDone) ||
			chatId == qu1z3xId
		) {
			bot.editMessageText(`<b>–° —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? ü§î</b>`, {
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `ü™™ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ üôç‚Äç‚ôÇÔ∏è`,

								callback_data: "startofregistration",
							},
						],
						[
							{
								text: `–ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚è∞`,
								callback_data: "posterconf",
							},
							{
								text: `–û—Ç–∑—ã–≤ üì©`,
								callback_data: "feedbackconf",
							},
						],
						[
							{
								text: `${
									chatId == qu1z3xId || chatId == stepanovId
										? "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç ü§ñ"
										: ""
								}`,
								callback_data: "exit",
							},
						],
					],
				},
			});
		} else if (
			!createMessage &&
			!dataAboutConferenceUsers.registrationIsDone
		) {
			bot.editMessageText(
				`<b>–Ø –≤–∞—Å –µ—â–µ –Ω–µ –∑–Ω–∞—é! ‚òπÔ∏è\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ùó</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: dataAboutConferenceUsers.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `ü™™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üôç‚Äç‚ôÇÔ∏è`,
									callback_data: "startofregistration",
								},
							],
							[
								{
									text: `–ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚è∞`,
									url: `https://t.me/${BotName}`,
								},

								{
									text: `–û—Ç–∑—ã–≤ üì©`,
									url: `https://t.me/${BotName}`,
								},
							],
							[
								{
									text: `${
										chatId == qu1z3xId || chatId == stepanovId
											? "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç ü§ñ"
											: ""
									}`,
									callback_data: "exit",
								},
							],
						],
					},
				}
			);
		} else if ((createMessage, dataAboutConferenceUsers.registrationIsDone)) {
			bot.sendMessage(chatId, `<b>–° —á–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? ü§î</b>`, {
				parse_mode: "html",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: `ü™™ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ üôç‚Äç‚ôÇÔ∏è`,
								callback_data: "startofregistration",
							},
						],
						[
							{
								text: `–ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚è∞`,
								callback_data: "posterconf",
							},
							{
								text: `–û—Ç–∑—ã–≤ üì©`,
								callback_data: "feedbackconf",
							},
						],
						[
							{
								text: `${
									chatId == qu1z3xId || chatId == stepanovId
										? "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç ü§ñ"
										: ""
								}`,
								callback_data: "exit",
							},
						],
					],
				},
			});
		} else if (
			(createMessage, !dataAboutConferenceUsers.registrationIsDone)
		) {
			bot.sendMessage(
				chatId,
				`<b>–Ø –≤–∞—Å –µ—â–µ –Ω–µ –∑–Ω–∞—é! ‚òπÔ∏è\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ùó</b>`,
				{
					parse_mode: "html",
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `ü™™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üôç‚Äç‚ôÇÔ∏è`,
									callback_data: "startofregistration",
								},
							],
							[
								{
									text: `–ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚è∞`,
									url: `https://t.me/${BotName}`,
								},
								{
									text: `–û—Ç–∑—ã–≤ üì©`,
									url: `https://t.me/${BotName}`,
								},
							],
							[
								{
									text: `${
										chatId == qu1z3xId || chatId == stepanovId
											? "–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç ü§ñ"
											: ""
									}`,
									callback_data: "exit",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
	}
}

async function feedbackConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 8;
		bot.editMessageText(
			`<b>–ï—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è? –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∏—Ö –Ω–∞–º! üòâ\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! ‚úçÔ∏èüòÜ</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
								callback_data: "menuConf",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function posterConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		bot.editMessageText(
			`<b>10:00 -10:05</b>\n
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥.–æ. –ú—ã—Ç–∏—â–∏
–°—Ç—Ä–µ–ª–æ–≤–æ–π –ï–≤–≥–µ–Ω–∏–∏ –ò–≤–∞–Ω–æ–≤–Ω—ã (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
\n<b>10.05 - 10.25</b>\n
–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —à–∫–æ–ª—ã –î–∞–Ω–∏–ª–∏–Ω–æ–π –ù–∏–Ω—ã –°–µ—Ä–≥–µ–µ–≤–Ω—ã
¬´–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –ú–ë–û–£ –°–û–® ‚Ññ27: –º–æ–¥–µ–ª—å, —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã¬ª (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
\n<b>10.25 - 10.50</b>\n
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ 1
–ü–æ—Å–µ—â–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞  
–£—á–∏—Ç–µ–ª—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–∫–∞–±–∏–Ω–µ—Ç—ã —É—Ç–æ—á–Ω—è—é) –ú–∞–Ω—É—Å–∞–¥–∂—è–Ω –ò–Ω–≥–∞ –ê–≤–µ—Ç–∏—Å–æ–≤–Ω–∞
–£—á–∏—Ç–µ–ª—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∫–∞–±–∏–Ω–µ—Ç—ã —É—Ç–æ—á–Ω—è—é) 
–ù—é—Ä–∞–ª—å—Å–∫–∞—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
\n<b>10.50 ‚Äì 12.00</b>\n
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ 2
–î–µ–ª–æ–≤–∞—è –∏–≥—Ä–∞: ¬´–î–µ—Ñ–∏—Ü–∏—Ç—ã —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Ä–µ—à–µ–Ω–∏—è¬ª (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–∞
\n<b>12.00 - 12.20</b>\n
–ö–æ—Ñ–µ-–±—Ä–µ–π–∫ ( –º–µ–¥–∏–∞—Ç–µ–∫–∞, 1 —ç—Ç–∞–∂)
\n<b>12.20 - 12.50</b>\n
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ 3
–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ ¬´–¶–∏—Ñ—Ä–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –ü–æ–¥–º–æ—Å–∫–æ–≤—å—è: —á–∞—Ç-–±–æ—Ç, –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –°—Ñ–µ—Ä—É–º, —Å—Ç—É–¥–∏—è –∑–∞–ø–∏—Å–∏ –æ–Ω–ª–∞–π–Ω-—É—Ä–æ–∫–æ–≤¬ª (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
–ú–µ—Ç–æ–¥–∏—Å—Ç –∫–∞—Ñ–µ–¥—Ä—ã —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –°—Ç–µ–ø–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á
\n<b>12.50 - 13.00</b>\n
–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
								callback_data: "menuConf",
							},
							{
								text: "–í–æ–ø—Ä–æ—Å ‚ùì",
								url: "https://t.me/AlexandrNikolaevich27",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function startOfRegistration(chatId, usersBlank = false) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		if (!usersBlank) {
			dataAboutConferenceUsers.actionInBot = 1;
			await bot.editMessageText(
				`<b>–Ø —Ä–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å</b> –Ω–∞ –≤—Ç–æ—Ä–æ–º –¥–Ω–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ–Ω—Å–∏–≤–æ–≤<b> <i>¬´–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã: –≥–∏–±—Ä–∏–¥–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ¬ª</i></b> –≤ –®–∫–æ–ª–µ ‚Ññ27 –≥–æ—Ä–æ–¥–∞ –ú—ã—Ç–∏—â–∏! –Ø <b>—á–∞—Ç-–±–æ—Ç</b> –ø–æ–º–æ—â–Ω–∏–∫ –≤ <b>—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª–∞—Å—Å–∞—Ö</b>. –°–µ–≥–æ–¥–Ω—è —è –±—É–¥—É <b>–ø–æ–º–æ–≥–∞—Ç—å</b> –≤–∞–º.\n\n–Ø –ø–æ–ø—Ä–æ—à—É –≤–∞—Å <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å</b> –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n- –ï—Å–ª–∏ <b>–≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ</b> –¥–∞–Ω–Ω—ã–µ, <b><i>–≤—Å–µ–≥–¥–∞</i></b> –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ <b>–ø—Ä–µ–¥—ã–¥—É—â–∏–π</b> —ç—Ç–∞–ø –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é <b>–≤–Ω–æ–≤—å!</b> üòâ`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: dataAboutConferenceUsers.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è–í –º–µ–Ω—é",
									callback_data: "menuConf",
								},
								{
									text: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚úÖ",
									callback_data: "initials",
								},
							],
						],
					},
				}
			);
		} else if (usersBlank) {
			dataAboutConferenceUsers.actionInBot = 1;
			await bot.editMessageText(
				`<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üòâ</b>\n\n<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:</b>\n<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å‚ùó</i><b>\n\n<code>${dataAboutConferenceUsers.lastName} ${dataAboutConferenceUsers.firstName} ${dataAboutConferenceUsers.middleName}</code>\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: <code>${dataAboutConferenceUsers.careerName}</code>\n–†–µ–≥–∏–æ–Ω: <code>${dataAboutConferenceUsers.region}</code>\n–ì–æ—Ä–æ–¥: <code>${dataAboutConferenceUsers.city}</code>\n–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ: <code>${dataAboutConferenceUsers.institution}</code>\nE-mail: <code>${dataAboutConferenceUsers.mail}</code>\n\n–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ? üßê</b>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: dataAboutConferenceUsers.messageId,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "‚¨ÖÔ∏è –í –º–µ–Ω—é",
									callback_data: "menuConf",
								},
								{
									text: "–ò–∑–º–µ–Ω–∏—Ç—å üîÑÔ∏è",
									callback_data: "initials",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log(error);
	}
}

async function getInitialsConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);

	try {
		dataAboutConferenceUsers.actionInBot = 1;
		bot.editMessageText(
			`<b><i>–≠—Ç–∞–ø 1/6  ‚Ä¢  –ò–Ω–∏—Ü–∏–∞–ª—ã</i></b> ${
				dataAboutConferenceUsers.middleName == "" ? "" : "‚úÖ"
			}\n\n–ò—Ç–∞–∫, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ <b>–∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!</b> üëãüòâ\n\n${
				dataAboutConferenceUsers.middleName == ""
					? "<b>–ü—Ä–∏–º–µ—Ä (–§–ò–û)</b>:\n<code>–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á</code>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ <b>—Å–≤–æ–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã</b> üòÄ"
					: `<b>–£–∫–∞–∑–∞–Ω–æ–µ –§–ò–û:</b>\n<code>${dataAboutConferenceUsers.lastName} ${dataAboutConferenceUsers.firstName} ${dataAboutConferenceUsers.middleName}</code>\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ</b> –¥–∞–Ω–Ω—ã–µ ü§î`
			}‚úçÔ∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
								callback_data: "startofregistration",
							},
							{
								text: `${
									dataAboutConferenceUsers.middleName != ""
										? "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è "
										: ""
								}`,
								callback_data: "careername",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function getCareerNameConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 2;

		bot.editMessageText(
			`<b><i>–≠—Ç–∞–ø 2/6  ‚Ä¢  –î–æ–ª–∂–Ω–æ—Å—Ç—å</i></b> ${
				dataAboutConferenceUsers.careerName == "" ? "" : "‚úÖ"
			}\n\n<b>–û—Ç–ª–∏—á–Ω–æ!</b>üëå\n–¢–µ–ø–µ—Ä—å –º—ã –Ω–µ <b><i>—á—É–∂–∏–µ –ª—é–¥–∏</i></b> üòÅ\n\n${
				dataAboutConferenceUsers.careerName == ""
					? "–°–µ–π—á–∞—Å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É <b>–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b> ü§î"
					: `<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n<code>${dataAboutConferenceUsers.careerName}</code>\n\n–í–ø–∏—à–∏—Ç–µ <b>–∏–∑–º–µ–Ω–µ–Ω–Ω—É—é</b> –¥–æ–ª–∂–Ω–æ—Å—Ç—å üßê`
			}‚úçÔ∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "initials" },
							{
								text: `${
									dataAboutConferenceUsers.careerName != ""
										? "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è "
										: ""
								}`,
								callback_data: "region",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function getRegionConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 3;

		bot.editMessageText(
			`<b><i>–≠—Ç–∞–ø 3/6  ‚Ä¢  –†–µ–≥–∏–æ–Ω</i></b> ${
				dataAboutConferenceUsers.region == "" ? "" : "‚úÖ"
			}\n\n–°—É–ø–µ—Ä, <b>–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!</b>üëç\n${
				dataAboutConferenceUsers.region == ""
					? "\n–ê —Ç–µ–ø–µ—Ä—å –≤–∞—à <b>—Ä–µ–≥–∏–æ–Ω</b> üòÅ"
					: `\n<b>–¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω:</b>\n<code>${dataAboutConferenceUsers.region}</code>\n\n–ò–∑–º–µ–Ω–∏—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>—Ä–µ–≥–∏–æ–Ω</b> üòä`
			}‚úçÔ∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "careername" },
							{
								text: `${
									dataAboutConferenceUsers.region != ""
										? "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"
										: ""
								}`,
								callback_data: "city",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function getCityConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 4;

		bot.editMessageText(
			` <b><i>–≠—Ç–∞–ø 4/6  ‚Ä¢  –ì–æ—Ä–æ–¥</i></b> ${
				dataAboutConferenceUsers.city == "" ? "" : "‚úÖ"
			}\n\n<b>–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ</b>, –ø—Ä–æ—Å—Ç–æ <b>–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!</b> ü§©\n\n${
				dataAboutConferenceUsers.city == ""
					? "–ù–æ –∫–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω –±–µ–∑ <b>–≥–æ—Ä–æ–¥–∞?</b> üòÖ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–µ–≥–æ</b> üôè"
					: `<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥:</b>\n<code>${dataAboutConferenceUsers.city}</code>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π <b>–≥–æ—Ä–æ–¥ —Å–Ω–æ–≤–∞</b> üëå`
			}‚úçÔ∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "region" },
							{
								text: `${
									dataAboutConferenceUsers.city != ""
										? "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"
										: ""
								}`,
								callback_data: "institution",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function getInstitutionConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 5;

		bot.editMessageText(
			`<b><i>–≠—Ç–∞–ø 5/6  ‚Ä¢  –£—á—Ä–µ–∂–¥–µ–Ω–∏–µ</i></b> ${
				dataAboutConferenceUsers.institution == "" ? "" : "‚úÖ"
			}\n\n–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º <b>–Ω–µ–º–Ω–æ–≥–æ!</b> ü§è\n\n${
				dataAboutConferenceUsers.institution == ""
					? "–ê –∫–∞–∫ –∂–µ <b>—É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ?</b> ü§î"
					: `<b>–¢–µ–∫—É—â–µ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>\n<code>${dataAboutConferenceUsers.institution}</code>\n\n–í–ø–∏—à–∏—Ç–µ <b>–∏–∑–º–µ–Ω–æ–µ</b> —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ üòâ`
			}‚úçÔ∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "city" },
							{
								text: `${
									dataAboutConferenceUsers.institution != ""
										? "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"
										: ""
								}`,
								callback_data: "mail",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function getEMailConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 6;

		bot.editMessageText(
			`<b><i>–≠—Ç–∞–ø 6/6  ‚Ä¢  E-mail</i></b> ${
				dataAboutConferenceUsers.mail == "" ? "" : "‚úÖ"
			}\n\n–ò–∏–∏.. <b>–§–∏–Ω–∞–ª—å–Ω—ã–π</b> –≤–æ–ø—Ä–æ—Å!üßê \n\n${
				dataAboutConferenceUsers.mail == ""
					? "<b>–ü—Ä–∏–º–µ—Ä:</b>\n<code>originalno@yandex.ru</code>\n\n–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à <b>E-mail</b> üôè"
					: `<b>–£–∫–∞–∑–∞–Ω–Ω—ã–π E-mail:</b>\n<code>${dataAboutConferenceUsers.mail}</code>\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>–Ω–æ–≤—É—é</b> –≠–ª. –ø–æ—á—Ç—É üòÄ`
			}‚úçÔ∏è`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "institution" },
							{
								text: `${
									dataAboutConferenceUsers.mail != "" ? "–ò—Ç–æ–≥ ‚û°Ô∏è" : ""
								}`,
								callback_data: "end–æf–∫egistration",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}

async function endOfRegistrationConf(chatId) {
	const dataAboutConferenceUsers = conferenceData.find(
		(obj) => obj.chatId === chatId
	);
	try {
		dataAboutConferenceUsers.actionInBot = 7;

		dataAboutConferenceUsers.registrationIsDone = `${
			dataAboutConferenceUsers.middleName != "" &&
			dataAboutConferenceUsers.careerName != "" &&
			dataAboutConferenceUsers.region != "" &&
			dataAboutConferenceUsers.city != "" &&
			dataAboutConferenceUsers.institution != "" &&
			dataAboutConferenceUsers.mail != ""
				? true
				: false
		}`;
		bot.editMessageText(
			`<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n<code>${dataAboutConferenceUsers.lastName} ${dataAboutConferenceUsers.firstName} ${dataAboutConferenceUsers.middleName}</code>\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: <code>${dataAboutConferenceUsers.careerName}</code>\n–†–µ–≥–∏–æ–Ω: <code>${dataAboutConferenceUsers.region}</code>\n–ì–æ—Ä–æ–¥: <code>${dataAboutConferenceUsers.city}</code>\n–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ: <code>${dataAboutConferenceUsers.institution}</code>\nE-mail: <code>${dataAboutConferenceUsers.mail}</code>\n\n‚ùó–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í–°–ï –ø—É–Ω–∫—Ç—ã‚ùó\n\n–ï—Å—Ç—å –æ—à–∏–±–∫–∏? ‚ùå\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å</b> –∏ <b>–∏–∑–º–µ–Ω–∏—Ç–µ</b> –¥–∞–Ω–Ω—ã–µ!üëå
			`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: dataAboutConferenceUsers.messageId,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "mail" },
							{
								text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ`,
								callback_data: "senduserblank",
							},
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
	}
}


startAll(){
//? –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è
		bot.onText(/(.+) (.+) (.+)/, async (message, match) => {
			const chatId = message.chat.id;
			const dataAboutConferenceUsers = conferenceData.find(
				(obj) => obj.chatId === chatId
			);

			if (
				dataAboutConferenceUsers &&
				dataAboutConferenceUsers.actionInBot == 1
			) {
				try {
					dataAboutConferenceUsers.lastName = match[1];
					dataAboutConferenceUsers.firstName = match[2];
					dataAboutConferenceUsers.middleName = match[3];

					getCareerNameConf(chatId);
				} catch (error) {
					console.log(error);
				}
			}
		});
		
		
		
		bot.on("message", async (message) => {
			const chatId = message.chat.id;
			const text = message.text;

			let firstName = message.from.first_name;

			const dataAboutConferenceUsers = conferenceData.find(
				(obj) => obj.chatId === chatId
			);
			
			if (
				((text == "/start conference" || text == "Cc") &&
					!dataAboutUser &&
					!dataAboutConferenceUsers) ||
				((chatId == qu1z3xId || chatId == stepanovId) &&
					!dataAboutUser &&
					(text == "/start conference" || text == "Cc") &&
					!dataAboutConferenceUsers)
			) {
				conferenceData.push({
					chatId: chatId,
					actionInBot: "",
					messageId: "",
					lastName: "", // —Ñ–∞–º–∏–ª–∏—è
					firstName: "", // –∏–º—è
					middleName: "", // –æ—Ç—á–µ—Å—Ç–≤–æ
					careerName: "",
					region: "",
					city: "",
					institution: "",
					mail: "",
					registrationIsDone: false,
				});
			}
			
			// –ö–û–ù–§–ï–†–ï–ù–¶–ò–Ø

				if (
					dataAboutConferenceUsers &&
					dataAboutConferenceUsers.actionInBot == 2
				) {
					dataAboutConferenceUsers.careerName = text;
					getRegionConf(chatId);
				} else if (
					dataAboutConferenceUsers &&
					dataAboutConferenceUsers.actionInBot == 3
				) {
					dataAboutConferenceUsers.region = text;
					getCityConf(chatId);
				} else if (
					dataAboutConferenceUsers &&
					dataAboutConferenceUsers.actionInBot == 4
				) {
					dataAboutConferenceUsers.city = text;
					getInstitutionConf(chatId);
				} else if (
					dataAboutConferenceUsers &&
					dataAboutConferenceUsers.actionInBot == 5
				) {
					dataAboutConferenceUsers.institution = text;
					getEMailConf(chatId);
				} else if (
					dataAboutConferenceUsers &&
					dataAboutConferenceUsers.actionInBot == 6
				) {
					dataAboutConferenceUsers.mail = text;
					endOfRegistrationConf(chatId);
				} else if (
					dataAboutConferenceUsers &&
					dataAboutConferenceUsers.actionInBot == 8
				) {
					feedbacksConf.push({
						firstName: firstName,
						text: text,
					});
					bot.editMessageText(
						"<b>–ú—ã —É—á—Ç–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòÄ\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üòâ‚ù§Ô∏è</b>",
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: conferenceData.find(
								(obj) => obj.chatId === chatId
							).messageId,
						}
					);

					setTimeout(() => {
						menuConf(chatId);
					}, 4000);
				}


				switch (text) {

				//?  –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é

					case "Cc":
					case "/start conference":
						startConference(chatId, firstName);
						break;

					default:
						setTimeout(() => {
							if (
								dataAboutConferenceUsers &&
								dataAboutConferenceUsers.actionInBot == 1 &&
								dataAboutConferenceUsers.middleName == ""
							) {
								bot.editMessageText(
									"*‚ùó–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\\! üö´\n\n_–ü—Ä–∏–º–µ—Ä \\(–§–ò–û\\):\n`–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`_\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–∏—à–∏—Ç–µ, —Å–ª–µ–¥—É—è –ø—Ä–∏–º–µ—Ä—É ‚úçÔ∏è*",
									{
										parse_mode: "MarkdownV2",
										chat_id: chatId,
										message_id: dataAboutConferenceUsers.messageId,
									}
								);
								dataAboutConferenceUsers.actionInBot = 1;
							}
						}, 1000);
						break;}
			
			
			
			})
			
			bot.on("callback_query", (query) => {
			const chatId = query.message.chat.id;
			const data = query.data;
			const dataAboutUser = usersData.find((obj) => obj.chatId === chatId);

			const dataAboutConferenceUsers = conferenceData.find(
				(obj) => obj.chatId === chatId
			);
			
			
			switch(data){
			
					// –ö–û–ù–§–ï–†–ï–ù–¶–ò–Ø

					case "startofregistration":
						if (dataAboutConferenceUsers.registrationIsDone) {
							startOfRegistration(chatId, true);
						} else if (!dataAboutConferenceUsers.registrationIsDone) {
							startOfRegistration(chatId);
						}
						break;
					case "initials":
						getInitialsConf(chatId);
						break;
					case "careername":
						getCareerNameConf(chatId);
						break;
					case "region":
						getRegionConf(chatId);
						break;
					case "city":
						getCityConf(chatId);
						break;
					case "institution":
						getInstitutionConf(chatId);
						break;
					case "mail":
						getEMailConf(chatId);
						break;
					case "end–æf–∫egistration":
						endOfRegistrationConf(chatId);
						break;
					case "senduserblank":
						try {
							bot.editMessageText(
								`<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å!</b> ü•≥üëè\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ <b>—É—Å–ø–µ—à–Ω–æ</b> –æ—Ç–ø—Ä–∞–ª–µ–Ω–∞! ‚úÖ\n\nC–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ <b>—É–¥–µ–ª—ë–Ω–Ω–æ–µ</b> –≤—Ä–µ–º—è!üôè\n<b>–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏!</b>üòÑ `,
								{
									parse_mode: "html",
									chat_id: chatId,
									message_id: conferenceData.find(
										(obj) => obj.chatId === chatId
									).messageId,
								}
							);
							setTimeout(() => {
								menuConf(chatId, false);
							}, 5000);
						} catch (error) {
							console.log(error);
						}
						break;
					case "menuConf":
						menuConf(chatId);
						break;
					case "posterconf":
						posterConf(chatId);
						break;
					case "feedbackconf":
						feedbackConf(chatId);
						break;
						case "conferencedatalist":
						RegistryUsersData(chatId, 2);
						break;
					case "feedbacksconflist":
						RegistryUsersData(chatId, 3);
						break;
					default:
						break;
				}
			})

}