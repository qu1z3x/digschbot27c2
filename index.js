import TelegramBot from "node-telegram-bot-api";

const TOKENs = [
	"6654105779:AAEnCdIzKS_cgJUg4rMY8yNM3LPP5iZ-d_A",
	"6452076729:AAGds4jdMEUT-idcutZdLGVjKu5kyLs3Md4",
];

const TOKEN = TOKENs[0]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

import { sendDataAboutText } from "./tgterminal.js";
import { sendDataAboutButton } from "./tgterminal.js";
import { sendDataAboutError } from "./tgterminal.js";

//? –ë–ê–ó–ê –î–ê–ù–ù–´–•

const httpsRequests = ["https://t.me/digsch27_bot", "https://t.me/digschbot"],
	httpsRules = [
		"https://t.me/digsch27_bot/?start=rules",
		"https://t.me/digschbot/?start=rules",
	];
let newsButtons = [
	{ text: "–ù–æ–≤–æ—Å—Ç–∏ üìñ", callback_data: "allnews" },
	{ text: "–û –±–æ—Ç–µ ü§ñ", callback_data: "botnews" },
	{ text: "–û —à–∫–æ–ª–µ üè´", callback_data: "schoolnews" },
];
let newsNowButtons = [
	{ text: "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ üìñ ‚Ä¢", url: httpsRequests[0] },
	{ text: "‚Ä¢ –û –±–æ—Ç–µ ü§ñ ‚Ä¢", url: httpsRequests[0] },
	{ text: "‚Ä¢ –û —à–∫–æ–ª–µ üè´ ‚Ä¢", url: httpsRequests[0] },
];

// UserID

let firstName,
	userStatus = "–£—á–µ–Ω–∏–∫ üßë‚Äçüè´";

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
const stickers = [
	"CAACAgIAAxkBAAIXI2U1QcFdX12aOkHp0zodw3LWDX5KAAKFAAPBnGAMi4wdH0hTXSIwBA",
	"CAACAgIAAxkBAAIXJGU1QclHfnHsU6z0isqU3v72p11mAAJ0AAPBnGAMtJfqrsmMmrQwBA",
	"CAACAgIAAxkBAAIXJWU1QdMJWNfIOh9odZH8Q25K98A-AAJvAAPBnGAMyw59i8DdTVYwBA",
	"CAACAgIAAxkBAAIXJmU1QdsTofm7uh7hi3mNYNE837HpAAJ6AAPBnGAM0GBdiVRCvP4wBA",
];
// –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? text
const newsText = [
	"–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòî",
	"- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ —Ç–µ–ø–µ—Ä—å –ü–û–°–¢–û–Ø–ù–ù–ê–Ø! üòÜ\n\n- –Ø —Å—Ç–∞–ª –±—ã—Å—Ç—Ä–µ–µ üèéÔ∏è, –≤–æ –≤—Å–µ—Ö —Å–º—ã—Å–ª–∞—Öüòâ\n\n- –ü–æ—è–≤–∏–ª–æ—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤üî•\n\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ 70 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –°–ï–ö–£–ù–î–£ ü§Ø",
	"–ú–ë–û–£ –°–û–® ‚Ññ27 | –®–∫–æ–ª–∞ —Å 2023–≥, —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ –¥–≤–∞ –∫–æ—Ä–ø—É—Å–∞, –Ω–æ –∏ –≤ –ø–µ—Ä–≤–æ–º, –∏ –≤–æ –≤—Ç–æ—Ä–æ–º —Ü–∞—Ä–∏—Ç –∫–ª–∞—Å—Å–Ω–∞—è —É—á–µ–Ω–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞! –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ. –£—á–µ–Ω–∏–∫–∏ –∏ —É—á–∏—Ç–µ–ª—è –∑–¥–µ—Å—å –∫–∞–∫ –æ–¥–Ω–∞ –±–æ–ª—å—à–∞—è —Å–µ–º—å—è, –≥–¥–µ –¥—Ä—É–∂–±–∞ –∏ –∑–Ω–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º",
];

// –ö–ª–∞—Å—Å—ã

const weekDayNames = ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"];

const classes11 = [
	"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞. –ö–∞–±–∏–Ω–µ—Ç 220. 8:30 - 9:15\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –ö–∞–±–∏–Ω–µ—Ç 315. 9:20 - 10:05\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö–∞–±–∏–Ω–µ—Ç 210. 10:10 - 10:55\n–§–∏–∑–∏–∫–∞. –ö–∞–±–∏–Ω–µ—Ç 301. 11:00 - 11:45\n–ò—Å—Ç–æ—Ä–∏—è. –ö–∞–±–∏–Ω–µ—Ç 205. 11:50 - 12:35\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –ö–∞–±–∏–Ω–µ—Ç 310. 12:40 - 13:25\n–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞. –°–ø–æ—Ä—Ç–∑–∞–ª. 13:30 - 14:15",
];
const classes10 = [
	"–†—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö–∞–±–∏–Ω–µ—Ç 210. 8:30 - 9:15\n–•–∏–º–∏—è. –ö–∞–±–∏–Ω–µ—Ç 303. 9:20 - 10:05\n–ê–ª–≥–µ–±—Ä–∞. –ö–∞–±–∏–Ω–µ—Ç 315. 10:10 - 10:55\n–ò—Å—Ç–æ—Ä–∏—è. –ö–∞–±–∏–Ω–µ—Ç 205. 11:00 - 11:45\n–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞. –°–ø–æ—Ä—Ç–∑–∞–ª. 11:50 - 12:35\n–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞. –ö–∞–±–∏–Ω–µ—Ç 212. 12:40 - 13:25\n–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ. –ö–∞–±–∏–Ω–µ—Ç 308. 13:30 - 14:15",
];
let messageId_user,
	botNum = 1,
	messageId_All,
	admin = false,
	// home
	messageId_sayHi0Home,
	messageId_sayHi1Home,
	messageId_sayHi2Home,
	messageId_sayHi3Home,
	messageId_menuHome,
	// Raspisanie
	className = "10–ì",
	weekday,
	// game1
	rndNum = 0,
	// game2
	computerChoise,
	playerChoise,
	// news
	newsNum,
	newsName = "–ù–æ–≤–æ—Å—Ç–∏ üìñ",
	editMode = false,
	// notification
	callsNotifStatusON = true;

//?  –§–£–ù–ö–¶–ò–ò

async function menuHome(chatId, exit = true) {
	try {
		if (exit && admin) {
			await bot.editMessageText("*–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ì*", {
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö",
								callback_data: "raspisanie",
							},
							{
								text: "–ó–≤–æ–Ω–∫–∏‚è∞",
								callback_data: "calls",
							},
						],
						[
							{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è", callback_data: "games" },
							{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
						],
						[
							{ text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è", callback_data: "reminders" },
							{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "options" },
						],
						[{ text: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üí†", callback_data: "adminMenu" }],
					],
				},
			});
		} else if (exit) {
			await bot.editMessageText("*–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ì*", {
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö",
								callback_data: "raspisanie",
							},
							{
								text: "–ó–≤–æ–Ω–∫–∏‚è∞",
								callback_data: "calls",
							},
						],
						[
							{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è", callback_data: "games" },
							{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ‚ùó", callback_data: "news" },
						],
						[
							{ text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è", callback_data: "reminders" },
							{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "options" },
						],
					],
				},
			});
		} else if (!exit) {
			bot.sendMessage(chatId, "*–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ì*", {
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö",
								callback_data: "raspisanie",
							},
							{
								text: "–ó–≤–æ–Ω–∫–∏‚è∞",
								callback_data: "calls",
							},
						],
						[
							{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è", callback_data: "games" },
							{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
						],
						[
							{ text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üóìÔ∏è", callback_data: "reminders" },
							{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "options" },
						],
					],
				},
			}).then((message) => {
				messageId_menuHome = message.message_id;
			});
		}
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (menuHome)"
		);
	}
}

async function rulesBot(chatId, RulesToStart = true) {
	try {
		if (RulesToStart) {
			await bot.editMessageText(
				"*_ü§ñ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìÉ_\n\n\\-  –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–≥–æ –≤ –±–ª–∞–≥–æ—Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–ª—è—Öüåç\n\n\\-  –ù–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª, –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ–µ–≤‚ùå\n\n\\-  –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç \\- –∫–æ–º–∞–Ω–¥–∞ \\/restart –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏\\!üòâ\n\n\\-  –ù–∞—à—ë–ª –æ—à–∏–±–∫—É? –ë–æ—Ç –ø–æ\\-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç? –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—É–Ω–∫—Ç—ã —Å–æ–±–ª—é–¥–µ–Ω—ã? –ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞? \\- –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∞–≤—Ç–æ—Ä—É @qu1z3x üëç *",
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "chooseclass2" },
								{ text: "–ü—Ä–∏–Ω—è—Ç—å‚úÖ", callback_data: "agreerules" },
							],
						],
					},
				}
			);
		} else if (!RulesToStart) {
			await bot.editMessageText(
				"*_ü§ñ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìÉ_\n\n\\-  –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–≥–æ –≤ –±–ª–∞–≥–æ—Ä–∞–∑—É–º–Ω—ã—Ö —Ü–µ–ª—è—Öüåç\n\n\\-  –ù–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª, –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ–µ–≤‚ùå\n\n\\-  –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç \\- –∫–æ–º–∞–Ω–¥–∞ \\/restart –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏\\!üòâ\n\n\\-  –ù–∞—à—ë–ª –æ—à–∏–±–∫—É? –ë–æ—Ç\\-–ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç? –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—É–Ω–∫—Ç—ã —Å–æ–±–ª—é–¥–µ–Ω—ã? –ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞? \\- –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∞–≤—Ç–æ—Ä—É @qu1z3x üëç *",
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "options" },
								{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
							],
						],
					},
				}
			);
		}
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º (rulesBot)"
		);
	}
}

async function ChoosingClass(chatId, start = 1) {
	try {
		if (start == 0) {
			await bot.editMessageText(
				"*_‚úèÔ∏è–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞üîÑÔ∏è_\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å üôÇüîé*",
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "10–ì", callback_data: "10g" },
								{ text: "11A", callback_data: "11a" },
								{ text: "11–í", callback_data: "11v" },
								{ text: "11–ì", callback_data: "11g" },
								{ text: "11–î", callback_data: "11d" },
							],
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "options" },
								{ text: "–ù–µ—Ç –º–æ–µ–≥–æüòû", callback_data: "netclassa" },
							],
						],
					},
				}
			);
		} else if (start == 1) {
			bot.editMessageText(
				`*–ë—É–¥–µ–º –±–ª–∏–∂–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\\! üòä\n\n[–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º](${httpsRules[botNum]})\n\n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π –∫–ª–∞—Å—Å* üôÇüîé`,
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "10–ì", callback_data: "10g" },
								{ text: "11A", callback_data: "11a" },
								{ text: "11–í", callback_data: "11v" },
								{ text: "11–ì", callback_data: "11g" },
								{ text: "11–î", callback_data: "11d" },
							],
						],
					},
				}
			);
		} else if (start === 2) {
			bot.editMessageText(
				`*–ë—É–¥–µ–º –±–ª–∏–∂–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\\! üòä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ _–æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –°–û–ì–õ–ê–°–ò–°–¨_ —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º](${httpsRules[botNum]})\n\n–ò –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å* üôÇüîé`,
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "10–ì",
									url: httpsRequests[botNum],
								},
								{ text: "11A", url: httpsRequests[botNum] },
								{ text: "11–í", url: httpsRequests[botNum] },
								{ text: "11–ì", url: httpsRequests[botNum] },
								{
									text: "11–î",
									url: httpsRequests[botNum],
								},
							],
							[{ text: "–ù–µ—Ç –º–æ–µ–≥–æüòû", callback_data: "netclassa2" }],
						],
					},
				}
			);
		}
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ (ChoosingClass)"
		);
	}
}

async function Raspisanie(chatId) {
	try {
		await bot.editMessageText(
			`*_‚è∞–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö_*\n\n–ö–ª–∞—Å—Å: *${className}* \\- _–º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ *–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö*_\n\n*–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚ùìü§î*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞ —Å–µ–≥–æ–¥–Ω—è üïö",
								callback_data: "today",
							},
							{
								text: "–ù–∞ –∑–∞–≤—Ç—Ä–∞ üï∞Ô∏è",
								callback_data: "tomorrow",
							},
						],
						[
							{ text: "–ü–Ω üò©", callback_data: "mon" },
							{ text: "–í—Ç üòû", callback_data: "tue" },
							{ text: "–°—Ä üòü", callback_data: "wen" },
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ß—Ç üôÇ", callback_data: "thu" },
							{ text: "–ü—Ç üòÜ", callback_data: "fri" },
						],
					],
				},
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (Raspisanie)"
		);
	}
}

async function RaspisanieText(chatId) {
	let raspisText = classes10[weekday];
	if (weekday == 0 || weekday == 6) {
		raspisText = "–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π! üòÜ";
	}
	await bot.editMessageText(
		`<b><i>‚è∞–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö\n\n${className}</i>  ${weekDayNames[weekday]}:\n\n${raspisText}</b>`,
		{
			parse_mode: "html",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
						{ text: "–°–º–µ–Ω–∏—Ç—åüîÅ", callback_data: "raspisanie" },
					],
				],
			},
		}
	);
}

async function netClassaText(chatId, exitMenu = true) {
	try {
		if (exitMenu) {
			await bot.editMessageText(
				`*–ì—Ä—É—Å—Ç–Ω–æ —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, –Ω–æ –≤–∏–¥–∏–º–æ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã _"–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã"_ ü´§\n\n–ù–æ\\! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @qu1z3x, –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\\! üòâ*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "chooseclass0" },
								{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
							],
						],
					},
				}
			);
		} else if (!exitMenu) {
			await bot.editMessageText(
				`*–ì—Ä—É—Å—Ç–Ω–æ —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, –Ω–æ –≤–∏–¥–∏–º–æ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã _"–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã"_ ü´§\n\n–ù–æ\\! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @qu1z3x, –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\\! üòâ*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ö –≤—ã–±–æ—Ä—É", callback_data: "chooseclass2" },
								{
									text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è",
									url: "https://t.me/qu1z3x/?start=rules",
								},
							],
						],
					},
				}
			);
		}
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å–≤–∏—è –∫–ª–∞—Å—Å–∞ (netClassaText)"
		);
	}
}

async function Calls(chatId) {
	let buttonNum,
		textCallsNotifStatus = "‚úÖüîî",
		notifStatusButton = [
			{
				text: "‚úÖ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî",
				callback_data: "callsnotifON",
			},
			{
				text: "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï",
				callback_data: "callsnotifOFF",
			},
		];

	if (!callsNotifStatusON) {
		buttonNum = 0;
		textCallsNotifStatus = "‚ùåüîï";
	} else if (callsNotifStatusON) {
		buttonNum = 1;
		textCallsNotifStatus = "‚úÖüîî";
	}

	try {
		await bot.editMessageText(
			`*_‚ùó–ó–≤–æ–Ω–∫–∏ ‚è∞_  \\|  ${textCallsNotifStatus}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n* \\- 1* —É—Ä–æ–∫ *08:30 \\- 09:10 \\| 15–º–∏–Ω*\n
* \\- 2* —É—Ä–æ–∫ *09:25 \\- 10:05 \\| 20–º–∏–Ω*\n
* \\- 3* —É—Ä–æ–∫ *10:25 \\- 11:05 \\| 20–º–∏–Ω / –ó–∞–≤—Ç—Ä–∞–∫*\n
* \\- 4* —É—Ä–æ–∫ *11:25 \\- 12:05 \\| 15–º–∏–Ω*\n
* \\- 5* —É—Ä–æ–∫ *12:20 \\- 13:00 \\| 15–º–∏–Ω*\n
* \\- 6* —É—Ä–æ–∫ *13:15 \\- 13:55 \\| 15–º–∏–Ω / –û–±–µ–¥*\n
* \\- 7* —É—Ä–æ–∫ *14:10 \\- 14:50 \\| –î–æ–º–æ–π*\n\n*–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @qu1z3x*`,

			{
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[notifStatusButton[buttonNum]],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ (Calls)"
		);
	}
}

async function Games(chatId) {
	try {
		await bot.editMessageText("*_üòÜ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è_\n\n–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º? ü§î*", {
			chat_id: chatId,
			message_id: messageId_menuHome,
			parse_mode: "MarkdownV2",
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "–£–≥–∞–¥–∞–π–∫–∞‚ùì", callback_data: "game1" },
						{ text: "–¶—É–µ-–§–∞ ‚úåÔ∏è", callback_data: "game2" },
					],
					[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
				],
			},
		});
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π (Games)"
		);
	}
}

async function game1(chatId, startGame = true) {
	try {
		let res = "";
		if (startGame)
			//? –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
			rndNum = Math.floor(Math.random() * 10);
		if (admin) res = rndNum;

		bot.editMessageText(
			`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É\\! ${res}\n\n–û—Ç–≥–∞–¥—ã–≤–∞–π üòâ*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "1", callback_data: "1" },
							{ text: "2", callback_data: "2" },
							{ text: "3", callback_data: "3" },
						],
						[
							{ text: "4", callback_data: "4" },
							{ text: "5", callback_data: "5" },
							{ text: "6", callback_data: "6" },
						],
						[
							{ text: "7", callback_data: "7" },
							{ text: "8", callback_data: "8" },
							{ text: "9", callback_data: "9" },
						],
						[
							{ text: "‚¨ÖÔ∏è", callback_data: "games" },
							{ text: "0", callback_data: "0" },
							{ text: "üí°", callback_data: "hint" },
						],
					],
				},
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –∏–≥—Ä—ã –£–≥–∞–¥–∞–π–∫–∞ (game1)"
		);
	}
}

async function game2(chatId) {
	try {
		await bot.editMessageText(
			"*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\n–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å‚ùì\n–°–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ‚ùó üò•*",
			{
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚úä", callback_data: "stone" },
							{ text: "‚úåÔ∏è", callback_data: "scissors" },
							{ text: "üñêÔ∏è", callback_data: "paper" },
						],
					],
				},
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –∏–≥—Ä—ã –¶—É–µ-–§–∞ (game2)"
		);
	}
}

async function game2_2(chatId, playerNum) {
	const options = ["‚úä", "‚úåÔ∏è", "üñêÔ∏è"];
	rndNum = Math.floor(Math.random() * options.length);
	playerChoise = options[playerNum - 1];
	computerChoise = options[rndNum];

	try {
		if (playerChoise === computerChoise) {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\nü§∑‚Äç‚ôÇÔ∏è –ù–∏—á—å—è\\! ü§∑‚Äç‚ôÄÔ∏è\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç\\:\n üë§${playerChoise}  vs  ${computerChoise}ü§ñ\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
		} else if (
			(playerChoise === "‚úä" && computerChoise === "‚úåÔ∏è") ||
			(playerChoise === "‚úåÔ∏è" && computerChoise === "üñêÔ∏è") ||
			(playerChoise === "üñêÔ∏è" && computerChoise === "‚úä")
		) {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\n‚úÖ –¢—ã –ø–æ–±–µ–¥–∏–ª\\! ü•≥\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n üë§${playerChoise}  vs  ${computerChoise}ü§ñ\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
		} else {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\n‚ùå –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\\! üòî\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n üë§${playerChoise}  vs  ${computerChoise}ü§ñ\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
		}
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã –¶—É–µ-–§–∞ (game2_2)"
		);
	}
}

async function News(chatId) {
	let previousN, nextN;

	if (newsNum == 0) {
		previousN = 1;
		nextN = 2;
	} else if (newsNum == 1) {
		previousN = 0;
		nextN = 2;
	} else if (newsNum == 2) {
		previousN = 0;
		nextN = 1;
	}

	try {
		await bot.editMessageText(
			`<b><i>‚ùó –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µttt | ${newsName}</i>\n\n${newsText[newsNum]}\n\n–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @qu1z3x</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[newsNowButtons[newsNum]],
						[newsButtons[previousN], newsButtons[nextN]],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ (news)"
		);
	}
}

async function AllNewsTextEdit(chatId) {
	editMode = true;

	// bot.sendMessage(chatId, "kjkjhkjh", {
	// 	reply_markup: {
	// 		keyboard: [
	// 			["..."],
	// 			["..."],
	// 		],
	// 	},
	// });

	bot.editMessageText(
		`<b><i>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ</i>\n\nüìñ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n<i>"${newsText[0]}"</i>\n\n<b>–ù–∞–ø–∏—à–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ ‚¨áÔ∏è</b>`,
		{
			parse_mode: "html",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
						{
							text: "–°–±—Ä–æ—Å–∏—Ç—å ‚ùå",
							callback_data: "allnewstextRESETmenu",
						},
					],
				],
			},
		}
	);
}

async function AllNewsTextEdit_2(chatId) {
	editMode = false;
	bot.editMessageText(
		`<b><i>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ</i>\n\nüÜï –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n<i>"${newsText[0]}"</i>\n\n<b>–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?üßê</b>`,
		{
			parse_mode: "html",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "–°–±—Ä–æ—Å–∏—Ç—å ‚ùå",
							callback_data: "allnewstextRESETmenu",
						},
						{ text: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å‚úÖ", callback_data: "adminMenu" },
					],
					// [{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
				],
			},
		}
	);
}

async function AllNewsTextReset(chatId) {
	await bot.editMessageText(
		`*_‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ_\n\nC–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–¥–µ–ª _"–ù–æ–≤–æ—Å—Ç–∏ üìñ"_ ‚ÅâÔ∏è*`,
		{
			parse_mode: "MarkdownV2",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "–û—Å—Ç–∞–≤–∏—Ç—å‚úÖ", callback_data: "adminMenu" },
						{
							text: "–°–±—Ä–æ—Å–∏—Ç—å ‚ùå",
							callback_data: "allnewstextRESETend",
						},
					],
				],
			},
		}
	);
}

async function Options(chatId, firstName) {
	try {
		await bot.editMessageText(
			`*_üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è_*\n\n–¢–≤–æ–π –ª–æ–≥–∏–Ω: *${firstName}*\n–†–æ–ª—å: *${userStatus}*\nID –ø—Ä–æ—Ñ–∏–ª—è: _*${chatId}*_\n\n–ö–ª–∞—Å—Å: *${className}\n\n[–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º](https://t.me/digschbot/?start=rules2)*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[{ text: "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üîÑ", callback_data: "chooseclass0" }],

						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (Options)"
		);
	}
}

async function adminMenu(chatId) {
	await bot.editMessageText(
		"*_üí†–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—èüí†_\n\n–î–æ–±—Ä—ã–π –¥–µ–Ω—å\\, –î–∞–≤–∏–¥\\!\n\n–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω\\? ü§ñ*",
		{
			parse_mode: "MarkdownV2",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "–¢–µ—Å—Ç üìü", callback_data: "adminMenu1" },
						{ text: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚úèÔ∏è", callback_data: "adminMenu2" },
					],
					[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" }],
				],
			},
		}
	);
}

async function adminMenuTest(chatId) {
	await bot.editMessageText(
		"*_‚ôªÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìü_\n\n–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º\\:*",
		{
			parse_mode: "MarkdownV2",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[{ text: "üî• –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìö", callback_data: "raspisanie" }],
					[
						{ text: "–ù–∞ —Å–µ–≥–æ–¥–Ω—è üïö", callback_data: "today" },
						{ text: "–ù–µ—Ç –º–æ–µ–≥–æ üòû", callback_data: "netclassa" },
					],
					[{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üïπÔ∏è", callback_data: "games" }],
					[
						{ text: "–£–≥–∞–¥–∞–π–∫–∞‚ùì", callback_data: "game1" },
						{ text: "–¶—É–µ-–§–∞ ‚úåÔ∏è", callback_data: "game2" },
					],
					[{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" }],
					[
						{ text: "–û –±–æ—Ç–µ ü§ñ", callback_data: "botnews" },
						{ text: "–û —à–∫–æ–ª–µ üè´", callback_data: "schoolnews" },
					],
					[{ text: "–ù–æ–≤–æ—Å—Ç–∏ üìñ", callback_data: "allnews" }],
					[
						{ text: "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚ôªÔ∏è", callback_data: "start" },
						{ text: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üîÑÔ∏è", callback_data: "restart1" },
					],
					[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" }],
				],
			},
		}
	);
}

async function adminMenuEdit(chatId) {
	await bot.editMessageText(
		"*_üìñ –ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚úèÔ∏è_ \n\n–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏\\?ü§ñ*",
		{
			parse_mode: "MarkdownV2",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: `‚úèÔ∏è–ò–∑–º–µ–Ω–µ–Ω–∏—Ç—å "–ù–æ–≤–æ—Å—Ç–∏üìñ"`,
							callback_data: "allnewsEDIT",
						},
					],
					[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" }],
				],
			},
		}
	);
}

async function start(chatId, userName, quickStart = false) {
	let rndNum = Math.floor(Math.random() * stickers.length);

	await bot.sendSticker(chatId, stickers[rndNum]).then((message) => {
		messageId_sayHi0Home = message.message_id;
	});

	await bot
		.sendMessage(chatId, `*–°–∞–ª—é—Ç ${userName} ‚úåÔ∏è*`, {
			parse_mode: "MarkdownV2",
		})
		.then((message) => {
			messageId_sayHi1Home = message.message_id;
		});

	await bot
		.sendMessage(
			chatId,
			"*–Ø —á–∞—Ç\\-–±–æ—Ç ü§ñ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é _—Ü–∏—Ñ—Ä–æ–≤–æ–µ_ –æ–±—É—á–µ–Ω–∏–µüè´\\. –Ø –±—É–¥—É —Ç–≤–æ–∏–º –≤–µ—Ä–Ω—ã–º —É—á–µ–±–Ω—ã–º –ø–æ–º–æ—à–Ω–∏–∫–æ–ºüòâ\\!\n ‚Ä¢ –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–∞—Å–ø–∏–∞–Ω–∏–µ?üìö\n ‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–æ–≥–¥–∞ –∏–¥—Ç–∏ –Ω–∞ —É—Ä–æ–∫?‚è∞\n ‚Ä¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ç–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö?üìù\n ‚Ä¢ –°—ã–≥—Ä–∞—Ç—å –ø–∞—Ä—Ç–µ–π–∫—É –≤ –¶—É–µ\\-–§–∞?‚úåÔ∏è\n ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —à–∫–æ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏?üìñ\n\\- —Ç–æ —è –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º, –ø–æ–µ—Ö–∞–ª–∏\\!üöÄ*",
			{
				parse_mode: "MarkdownV2",
			}
		)
		.then((message) => {
			messageId_sayHi2Home = message.message_id;
		});

	await bot.sendMessage(chatId, `„Ö§`, {}).then((message) => {
		messageId_menuHome = message.message_id;
	});

	if (quickStart) {
		menuHome(chatId);
		className = "–ù–µ –≤—ã–±—Ä–∞–Ω";
	} else if (!quickStart) {
		ChoosingClass(chatId, 2);
	}
}

async function endMessage(chatId) {
	try {
		await bot.editMessageText(
			`*–° —Ç–æ–±–æ–π –±—ã–ª–æ _–∫–ª–∞—Å—Å–Ω–æ_\\!üòÅ\n–í—Å—Ç—Ä–µ—Ç–∏–º—Å—è —Ç—É—Ç ‚¨áÔ∏èüòâ*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
			}
		);
	} catch (error) {
		sendDataAboutError(
			chatId,
			"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –ø—Ä–æ—â–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–∏–∞–ª–æ–≥–æ–º (endMessage)"
		);
	}
}

async function StartAll() {
	// bot.sendMessage(userId, ""); //?                                                         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É.

	if (TOKEN == TOKENs[0]) botNum = 0;
	else if (TOKEN == TOKENs[1]) botNum = 1;

	bot.on("message", async (message) => {
		const chatId = message.chat.id;

		if (chatId == "923690530") {
			admin = true;
			userStatus = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë";
		} else {
			admin = false;
			userStatus = "–£—á–µ–Ω–∏–∫ üßë‚Äçüè´";
		}

		messageId_user = message.message_id;
		const text = message.text;
		firstName = message.from.first_name;

		// –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		let date = new Date(message.date * 1000),
			d = date.getDay(),
			h = date.getHours(),
			m = date.getMinutes(),
			s = date.getSeconds(),
			time = `${String(h).padStart(2, "0")}:${String(m).padStart(
				2,
				"0"
			)}:${String(s).padStart(2, "0")}`;

		//* –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

		sendDataAboutText(
			message.from.first_name,
			message.from.username,
			chatId,
			text
		);
		// ${JSON.stringify(message)}
		console.log(
			`\n${time} ${weekDayNames[d]} | text | ${message.from.first_name} ${message.from.username} <${chatId}>  -  "${text}" `
		);

		if (editMode) {
			editMode = false;
			newsText[0] = text;
			AllNewsTextEdit_2(chatId);
		}

		//? –ö–û–ú–ê–ù–î–´

		switch (text) {
			case "s":
			case "/start":
				endMessage(chatId);
				bot.deleteMessage(chatId, messageId_user);
				start(chatId, message.from.first_name);
				break;
			case "st":
				endMessage(chatId);
				bot.deleteMessage(chatId, messageId_user);
				start(chatId, message.from.first_name, true);
				break;
			case "/restart":
				try {
					await bot.deleteMessage(chatId, messageId_menuHome);
				} catch (error) {
					sendDataAboutError(
						chatId,
						"–ù–µ –Ω–∞–π–¥–µ–Ω message_id menuHome, —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (/restart)"
					);
				}
				bot.deleteMessage(chatId, messageId_user);
				menuHome(chatId, false);
				break;
			case "/start rules":
				bot.deleteMessage(chatId, messageId_user);
				rulesBot(chatId);
				break;
			case "/start rules2":
				bot.deleteMessage(chatId, messageId_user);
				rulesBot(chatId, false);
				break;
			default:
				try {
					await bot.deleteMessage(chatId, messageId_user);
				} catch (error) {
					sendDataAboutError(
						chatId,
						"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (default)"
					);
				}
				break;
		}
	});

	//? –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–î –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò

	bot.on("callback_query", (query) => {
		const chatId = query.message.chat.id;
		firstName = query.from.first_name;
		newsNum = 0;

		if (chatId == "923690530") {
			admin = true;
			userStatus = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë";
		} else {
			admin = false;
			userStatus = "–£—á–µ–Ω–∏–∫ üßë‚Äçüè´";
		}

		const data = query.data;
		messageId_menuHome = query.message.message_id;

		// –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		let hintText,
			date = new Date(),
			d = date.getDay(),
			h = date.getHours(),
			m = date.getMinutes(),
			s = date.getSeconds(),
			time = `${String(h).padStart(2, "0")}:${String(m).padStart(
				2,
				"0"
			)}:${String(s).padStart(2, "0")}`;

		//* –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

		sendDataAboutButton(
			query.from.first_name,
			query.from.username,
			chatId,
			data
		);

		console.log(
			`\n${time} ${weekDayNames[d]} | button | ${query.from.first_name} ${query.from.username} <${chatId}>  -  [${data}]`
		);

		if (data == rndNum) {
			bot.editMessageText(
				`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ ${rndNum}\\!ü•≥ \n\n–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞??*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game1" },
							],
						],
					},
				}
			);
		} else if (
			data == "0" ||
			data == "1" ||
			data == "2" ||
			data == "3" ||
			data == "4" ||
			data == "5" ||
			data == "6" ||
			data == "7" ||
			data == "8" ||
			data == "9"
		) {
			bot.editMessageText(
				`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî\n–û—Ç–≤–µ—Ç: ${rndNum}\\! \n\n–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞??*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game1" },
							],
						],
					},
				}
			);
		}

		switch (data) {
			//? –ö–õ–ê–°–°–´/–†–ê–°–ü–ò–°–ê–ù–ò–ï

			case "10g":
				className = "10–ì";
				menuHome(chatId);
				break;
			case "11d":
				className = "11–î";
				menuHome(chatId);
				break;
			case "11g":
				className = "11–ì";
				menuHome(chatId);
				break;
			case "11a":
				className = "11–ê";
				menuHome(chatId);
				break;
			case "11v":
				className = "11–í";
				menuHome(chatId);
				break;

			//? –î–ï–ù–¨ –ù–ï–î–ï–õ–ò

			case "mon":
				weekday = 1;
				RaspisanieText(chatId);
				break;
			case "tue":
				weekday = 2;
				RaspisanieText(chatId);
				break;
			case "wen":
				weekday = 3;
				RaspisanieText(chatId);
				break;
			case "thu":
				weekday = 4;
				RaspisanieText(chatId);
				break;
			case "fri":
				weekday = 5;
				RaspisanieText(chatId);
				break;
			case "today":
				weekday = d;
				RaspisanieText(chatId);
				break;
			case "tomorrow":
				weekday = d + 1;
				RaspisanieText(chatId);
				break;

			//? –î–ï–ô–°–¢–í–ò–Ø –ö–ù–û–ü–û–ö

			// –ù–∞—á–∞–ª—å–Ω—ã–µ
			case "start":
				endMessage(chatId);
				start(chatId, firstName);
				break;
			case "exit":
				editMode = false;
				try {
					menuHome(chatId);
				} catch (error) {
					sendDataAboutError(
						"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–æ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é, —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (exit)"
					);
					menuHome(chatId, false);
				}
				break;
			case "chooseclass1":
				ChoosingClass(chatId, 1);
				break;
			case "chooseclass2":
				ChoosingClass(chatId, 2);
				break;

			// RASPISANIE

			case "raspisanie":
				Raspisanie(chatId);
				break;
			case "netclassa":
				netClassaText(chatId);
				break;
			case "netclassa2":
				netClassaText(chatId, false);
				break;

			// CALLS

			case "calls":
				Calls(chatId);
				break;
			case "callsnotifON":
				callsNotifStatusON = true;
				Calls(chatId);
				break;
			case "callsnotifOFF":
				callsNotifStatusON = false;
				Calls(chatId);
				break;

			// GAMES

			case "games":
				Games(chatId);
				break;
			// game1
			case "game1":
				game1(chatId);
				break;
			case "hint":
				if (rndNum <= 5) {
					hintText = `–ß–∏—Å–ª–æ _–º–µ–Ω—å—à–µ_ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5\\! üìâüòâ`;
				} else if (rndNum >= 5) {
					hintText = `–ß–∏—Å–ª–æ _–±–æ–ª—å—à–µ_ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5\\! üìàüòâ`;
				}
				bot.editMessageText(`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n${hintText}*`, {
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "game1_1" },
								{ text: "–û—Ç–≤–µ—Ç‚ÅâÔ∏è", callback_data: "game1res" },
							],
						],
					},
				});
				break;
			case "game1res":
				bot.editMessageText(
					`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n–ù—É —Ç–∞–∫ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ\\! üòí\n–û—Ç–≤–µ—Ç: ${rndNum}\\!\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
					{
						parse_mode: "MarkdownV2",
						chat_id: chatId,
						message_id: messageId_menuHome,
						reply_markup: {
							inline_keyboard: [
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
									{ text: "–î–∞–≤–∞–πüëå", callback_data: "game1" },
								],
							],
						},
					}
				);
				break;
			case "game1_1":
				game1(chatId, false);
				break;
			// game2
			case "game2":
				game2(chatId);
				break;
			case "stone":
				game2_2(chatId, 1);
				break;
			case "scissors":
				game2_2(chatId, 2);
				break;
			case "paper":
				game2_2(chatId, 3);
				break;

			// NEWS (What's new)

			case "news":
				newsName = "–ù–æ–≤–æ—Å—Ç–∏ üìñ";
				newsNum = 0;
				News(chatId);
				break;
			case "allnews":
				newsName = "–ù–æ–≤–æ—Å—Ç–∏ üìñ";
				newsNum = 0;
				News(chatId);
				break;
			case "botnews":
				newsName = "–û –±–æ—Ç–µ ü§ñ";
				newsNum = 1;
				News(chatId);
				break;
			case "schoolnews":
				newsName = "–û —à–∫–æ–ª–µ üè´";
				newsNum = 2;
				News(chatId);
				break;

			// OPTIONS

			case "options":
				Options(chatId, firstName);
				break;
			case "chooseclass0":
				ChoosingClass(chatId, 0);
				break;

			// ADMINMENU

			case "adminMenu":
				adminMenu(chatId);
				break;
			case "adminMenu1":
				adminMenuTest(chatId);
				break;
			case "adminMenu2":
				adminMenuEdit(chatId);
				break;
			case "allnewsEDIT":
				AllNewsTextEdit(chatId);
				break;
			case "allnewstextRESETmenu":
				AllNewsTextReset(chatId);
				break;
			case "allnewstextRESET":
				AllNewsTextEdit(chatId);
				break;
			case "allnewstextRESETend":
				newsText[0] = "–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòî";
				bot.editMessageText(
					`*_‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–æ–≤–æ—Å—Ç–∏ üìñ_\n\n–†–∞–∑–¥–µ–ª _"–ù–æ–≤–æ—Å—Ç–∏üìñ"_ \\- —Å–±—Ä–æ—à–µ–Ω\\!‚úÖ*`,
					{
						parse_mode: "MarkdownV2",
						chat_id: chatId,
						message_id: messageId_menuHome,
					}
				);
				setTimeout(() => {
					adminMenu(chatId);
				}, 2000);
				break;
			case "restart1":
				ChoosingClass(chatId, 2);
				break;
			case "agreerules":
				bot.editMessageText(`*–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ ‚ù§Ô∏è \\- –∫–æ–º–∞–Ω–¥–∞ @qu1z3x*`, {
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
				});
				setTimeout(() => {
					ChoosingClass(chatId, 1);
				}, 2000);
			default:
				break;
		}
	});
}

StartAll();
