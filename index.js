const TelegramBot = require("node-telegram-bot-api");

const TOKEN = "6452076729:AAGds4jdMEUT-idcutZdLGVjKu5kyLs3Md4";
// 6452076729:AAGds4jdMEUT-idcutZdLGVjKu5kyLs3Md4 - –æ—Ä–∏–≥–∏–Ω–∞–ª
// 6654105779:AAEnCdIzKS_cgJUg4rMY8yNM3LPP5iZ-d_A - –ø—Ä–æ—Ç–æ—Ç–∏–ø

const bot = new TelegramBot(TOKEN, { polling: true });

//? –ë–ê–ó–ê –î–ê–ù–ù–´–•

// UserID
const qu1z3x = "923690530";

let firstName;

// –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? (text)
const newsText = [
	"- –Ø —Å—Ç–∞–ª –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ üèéÔ∏è, –µ—Å–ª–∏ –∏–Ω–∞—á–µ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Çüòâ\n- –£ –º–µ–Ω—è –ø–æ—è–≤–∏–ª–æ—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤üÜï\n\n–ù–æ! –≤—Å–µ –µ—â–µ –Ω–µ 24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ü•∫",
	"- 87687687687687687666 66 8976 877 6876 876\n\n987879879 87987\n9079798798\n98798798 7987",
];

// –ö–ª–∞—Å—Å—ã

const weekDayNames = [
	"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	"–í—Ç–æ—Ä–Ω–∏–∫",
	"–°—Ä–µ–¥–∞",
	"–ß–µ—Ç–≤–µ—Ä–≥",
	"–ü—è—Ç–Ω–∏—Ü–∞",
	"–°—É–±–±–æ—Ç–∞",
	"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
];

const r11g = [
	"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞. –ö–∞–±–∏–Ω–µ—Ç 220. 8:30 - 9:15\n–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞. –ö–∞–±–∏–Ω–µ—Ç 315. 9:20 - 10:05\n–†—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö–∞–±–∏–Ω–µ—Ç 210. 10:10 - 10:55\n–§–∏–∑–∏–∫–∞. –ö–∞–±–∏–Ω–µ—Ç 301. 11:00 - 11:45\n–ò—Å—Ç–æ—Ä–∏—è. –ö–∞–±–∏–Ω–µ—Ç 205. 11:50 - 12:35\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –ö–∞–±–∏–Ω–µ—Ç 310. 12:40 - 13:25\n–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞. –°–ø–æ—Ä—Ç–∑–∞–ª. 13:30 - 14:15",
];
const r11a = [
	"–†—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ö–∞–±–∏–Ω–µ—Ç 210. 8:30 - 9:15\n–•–∏–º–∏—è. –ö–∞–±–∏–Ω–µ—Ç 303. 9:20 - 10:05\n–ê–ª–≥–µ–±—Ä–∞. –ö–∞–±–∏–Ω–µ—Ç 315. 10:10 - 10:55\n–ò—Å—Ç–æ—Ä–∏—è. –ö–∞–±–∏–Ω–µ—Ç 205. 11:00 - 11:45\n–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞. –°–ø–æ—Ä—Ç–∑–∞–ª. 11:50 - 12:35\n–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞. –ö–∞–±–∏–Ω–µ—Ç 212. 12:40 - 13:25\n–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ. –ö–∞–±–∏–Ω–µ—Ç 308. 13:30 - 14:15",
];
let messageId_user,
	messageId_All,
	admin = false,
	// home
	messageId_sayHi0Home,
	messageId_sayHi1Home,
	messageId_sayHi2Home,
	messageId_sayHi3Home,
	messageId_menuHome,
	// Raspisanie
	className = "10–ì",
	weekday,
	// game1
	rndNum = 0,
	// game2
	computerChoise,
	playerChoise,
	// news
	newsNum;

//?  –§–£–ù–ö–¶–ò–ò

async function menuHome(chatId, exit = true) {
	try {
		if (exit && admin) {
			await bot.editMessageText("*–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ì*", {
				chat_id: qu1z3x,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "üî•–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö",
								callback_data: "raspisanie",
							},
							{
								text: "–ó–≤–æ–Ω–∫–∏‚è∞",
								callback_data: "calls",
							},
						],
						[
							{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è", callback_data: "games" },
							{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
						],
						[
							{ text: "üí† –†–µ–µ—Å—Ç—Ä üí†", callback_data: "adminMenu" },
							{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "options" },
						],
					],
				},
			});
		} else if (exit) {
			await bot.editMessageText("*–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ì*", {
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "üî•–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö",
								callback_data: "raspisanie",
							},
							{
								text: "–ó–≤–æ–Ω–∫–∏‚è∞",
								callback_data: "calls",
							},
						],
						[
							{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è", callback_data: "games" },
							{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
						],
						[{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "options" }],
					],
				},
			});
		} else if (!exit) {
			bot.sendMessage(chatId, "*–ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω? ü§ì*", {
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "üî•–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö",
								callback_data: "raspisanie",
							},
							{
								text: "–ó–≤–æ–Ω–∫–∏‚è∞",
								callback_data: "calls",
							},
						],
						[
							{ text: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è", callback_data: "games" },
							{ text: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ‚ùó", callback_data: "news" },
						],
						[{ text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "options" }],
					],
				},
			}).then((message) => {
				messageId_menuHome = message.message_id;
			});
		}
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function ChoosingClass(chatId, exit = false) {
	try {
		if (exit) {
			await bot.editMessageText("*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å üôÇüîé*", {
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "10–ì", callback_data: "10g" },
							{ text: "11A", callback_data: "11a" },
							{ text: "11–í", callback_data: "11v" },
							{ text: "11–ì", callback_data: "11g" },
							{ text: "11–î", callback_data: "11d" },
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ù–µ—Ç –º–æ–µ–≥–æüòû", callback_data: "netclassa" },
						],
					],
				},
			});
		} else if (!exit) {
			bot.sendMessage(
				chatId,
				"*–ë—É–¥–µ–º –±–ª–∏–∂–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\\!üòä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å üôÇüîé*",
				{
					parse_mode: "MarkdownV2",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "10–ì", callback_data: "10g" },
								{ text: "11A", callback_data: "11a" },
								{ text: "11–í", callback_data: "11v" },
								{ text: "11–ì", callback_data: "11g" },
								{ text: "11–î", callback_data: "11d" },
							],
						],
					},
				}
			).then((message) => {
				messageId_menuHome = message.message_id;
			});
		}
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function Raspisanie(chatId) {
	try {
		await bot.editMessageText(
			`*_‚è∞–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö_*\n\n–ö–ª–∞—Å—Å: *${className}* \\- _–º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ *–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö*_\n\n*–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚ùìü§î*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: "–ù–∞ —Å–µ–≥–æ–¥–Ω—è üïö",
								callback_data: "today",
							},
							{
								text: "–ù–∞ –∑–∞–≤—Ç—Ä–∞ üï∞Ô∏è",
								callback_data: "tomorrow",
							},
						],
						[
							{ text: "–ü–Ω üò©", callback_data: "mon" },
							{ text: "–í—Ç üòû", callback_data: "tue" },
							{ text: "–°—Ä üòü", callback_data: "wen" },
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ß—Ç üôÇ", callback_data: "thu" },
							{ text: "–ü—Ç üòÜ", callback_data: "fri" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function RaspisanieText(chatId) {
	await bot.editMessageText(
		`<b><i>‚è∞–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìö\n\n${className}  ${weekDayNames[weekday]}:</i>\n\n${r11g}</b>`,
		{
			parse_mode: "html",
			chat_id: chatId,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
						{ text: "–°–º–µ–Ω–∏—Ç—åüîÅ", callback_data: "raspisanie" },
					],
				],
			},
		}
	);
}

async function netClassaText(chatId) {
	try {
		await bot.editMessageText(
			`*–ì—Ä—É—Å—Ç–Ω–æ —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å, –Ω–æ –≤–∏–¥–∏–º–æ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã _"–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã"_ ü´§\n\n–ù–æ\\! –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å @qu1z3x, –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\\! üòâ*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "raspisanie" },
							{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function Calls(chatId) {
	try {
		await bot.editMessageText(
			`*_‚ùó–ó–≤–æ–Ω–∫–∏ ‚è∞_\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n* \\- 1* —É—Ä–æ–∫ *08:30 \\- 09:10 \\| 15–º–∏–Ω*\n
* \\- 2* —É—Ä–æ–∫ *09:25 \\- 10:05 \\| 20–º–∏–Ω*\n
* \\- 3* —É—Ä–æ–∫ *10:25 \\- 11:05 \\| 20–º–∏–Ω / –ó–∞–≤—Ç—Ä–∞–∫*\n
* \\- 4* —É—Ä–æ–∫ *11:25 \\- 12:05 \\| 15–º–∏–Ω*\n
* \\- 5* —É—Ä–æ–∫ *12:20 \\- 13:00 \\| 15–º–∏–Ω*\n
* \\- 6* —É—Ä–æ–∫ *13:15 \\- 13:55 \\| 15–º–∏–Ω / –û–±–µ–¥*\n
* \\- 7* —É—Ä–æ–∫ *14:10 \\- 14:50 \\| –î–æ–º–æ–π*\n\n*–ó–≤–æ–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–Ω–∞—á–µ?\n–°–æ–æ–±—â–∏ @qu1z3x*`,
			{
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function Games(chatId) {
	try {
		await bot.editMessageText("*_üòÜ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è_\n\n–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º? ü§î*", {
			chat_id: chatId,
			message_id: messageId_menuHome,
			parse_mode: "MarkdownV2",
			reply_markup: {
				inline_keyboard: [
					[
						{ text: "–£–≥–∞–¥–∞–π–∫–∞‚ùì", callback_data: "game1" },
						{ text: "–¶—É–µ-–§–∞ ‚úåÔ∏è", callback_data: "game2" },
					],
					[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
				],
			},
		});
	} catch (error) {
		await bot.sendMessage(
			chatId,
			"*_üòÜ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—èüïπÔ∏è_\n\n–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º? ü§î*",
			{
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "–£–≥–∞–¥–∞–π–∫–∞‚ùì", callback_data: "game1" },
							{ text: "–ö–ú–ù ü™®‚úÇÔ∏èüßª", callback_data: "game2" },
						],
						[{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" }],
					],
				},
			}
		);
	}
}

async function game1(chatId, startGame = true) {
	//? –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
	try {
		if (startGame) {
			rndNum = Math.floor(Math.random() * 10);
		}
		bot.editMessageText(
			"*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ \\(0 \\- 9\\)\n\n–û—Ç–≥–∞–¥—ã–≤–∞–π üòâ*",
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "1", callback_data: "1" },
							{ text: "2", callback_data: "2" },
							{ text: "3", callback_data: "3" },
						],
						[
							{ text: "4", callback_data: "4" },
							{ text: "5", callback_data: "5" },
							{ text: "6", callback_data: "6" },
						],
						[
							{ text: "7", callback_data: "7" },
							{ text: "8", callback_data: "8" },
							{ text: "9", callback_data: "9" },
						],
						[
							{ text: "‚¨ÖÔ∏è", callback_data: "games" },
							{ text: "0", callback_data: "0" },
							{ text: "üí°", callback_data: "hint" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function game2(chatId) {
	try {
		await bot.editMessageText(
			"*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\n–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å‚ùì\n–°–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ‚ùó üò•*",
			{
				chat_id: chatId,
				message_id: messageId_menuHome,
				parse_mode: "MarkdownV2",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚úä", callback_data: "stone" },
							{ text: "‚úåÔ∏è", callback_data: "scissors" },
							{ text: "üñêÔ∏è", callback_data: "paper" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function game2_2(chatId, playerNum) {
	const options = ["‚úä", "‚úåÔ∏è", "üñêÔ∏è"];
	rndNum = Math.floor(Math.random() * options.length);
	playerChoise = options[playerNum - 1];
	computerChoise = options[rndNum];

	try {
		if (playerChoise === computerChoise) {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\nü§∑‚Äç‚ôÇÔ∏è –ù–∏—á—å—è\\! ü§∑‚Äç‚ôÄÔ∏è\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç\\:\n üë§${playerChoise}  vs  ${computerChoise}ü§ñ\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					chat_id: chatId,
					message_id: messageId_menuHome,
					parse_mode: "MarkdownV2",
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
		} else if (
			(playerChoise === "‚úä" && computerChoise === "‚úåÔ∏è") ||
			(playerChoise === "‚úåÔ∏è" && computerChoise === "üñêÔ∏è") ||
			(playerChoise === "üñêÔ∏è" && computerChoise === "‚úä")
		) {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\n‚úÖ –¢—ã –ø–æ–±–µ–¥–∏–ª\\! ü•≥\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n üë§${playerChoise}  vs  ${computerChoise}ü§ñ\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
		} else {
			bot.editMessageText(
				`*_ü™® –ö–∞–º–µ–Ω—å\\-–ù–æ–∂–Ω–∏—Ü—ã\\-–ë—É–º–∞–≥–∞ ‚úÇÔ∏è_\n\n‚ùå –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\\! üòî\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n üë§${playerChoise}  vs  ${computerChoise}ü§ñ\n\n–ï—â–µ –ø–∞—Ä—Ç–µ–π–∫—É\\? ü§î*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game2" },
							],
						],
					},
				}
			);
		}
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function News(chatId) {
	try {
		newsNum = 0;
		await bot.editMessageText(
			`<b><i>‚ùó –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ ‚ùó</i>\n\n${newsText[newsNum]}\n\n–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∫ @qu1z3x</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "–û –±–æ—Ç–µ ü§ñ", callback_data: "botnews" },
							{ text: "–û —à–∫–æ–ª–µ üè´", callback_data: "schoolnews" },
						],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}
async function Options(chatId, firstName, userName) {
	try {
		await bot.editMessageText(
			`*_üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è_*\n\n–¢–≤–æ–π –ª–æ–≥–∏–Ω: *${firstName}*\nID –ø—Ä–æ—Ñ–∏–ª—è: _*${chatId}*_\n–ö–ª–∞—Å—Å: *${className}*`,
			{
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
				reply_markup: {
					inline_keyboard: [
						[{ text: "–°–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å üîÑ", callback_data: "chooseclass" }],
						[
							{ text: "‚¨ÖÔ∏è–í –º–µ–Ω—é", callback_data: "exit" },
							{ text: "–ù–∞–ø–∏—Å–∞—Ç—å‚úçÔ∏è", url: "https://t.me/qu1z3x" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
}

async function adminMenu(chatId) {
	await bot.editMessageText(
		"*_üí†–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—èüí†_\n\n–î–æ–±—Ä—ã–π –¥–µ–Ω—å\\, –î–∞–≤–∏–¥\\!\n\n–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ _–∏–∑–º–µ–Ω–∏—Ç—å_ –≤–æ –º–Ω–µ\\? üßë‚Äçüíª*",
		{
			parse_mode: "MarkdownV2",
			chat_id: qu1z3x,
			message_id: messageId_menuHome,
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ‚ùì", callback_data: "newsEDIT" }],
					[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "exit" }],
				],
			},
		}
	);
}

async function start(chatId, userName, quickStart = false) {
	try {
		bot.deleteMessage(chatId, messageId_user);
	} catch (error) {
		console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
	}
	await bot
		.sendSticker(
			chatId,
			"CAACAgIAAxkBAAIPoGURnYZUL89bmAaLJgNI0kU7v-xXAAKAAAPBnGAMNSI9fXm2854wBA"
		)
		.then((message) => {
			messageId_sayHi0Home = message.message_id;
		});

	await bot
		.sendMessage(chatId, `*–°–∞–ª—é—Ç ${userName} ‚úåÔ∏è*`, {
			parse_mode: "MarkdownV2",
		})
		.then((message) => {
			messageId_sayHi1Home = message.message_id;
		});

	await bot
		.sendMessage(
			chatId,
			"*–Ø —á–∞—Ç\\-–±–æ—Ç ü§ñ, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ _—Ü–∏—Ñ—Ä–æ–≤—ã—Ö_ –∫–ª–∞—Å—Å–æ–≤ –≤ —à–∫–æ–ª–µ üè´\\. –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞–º –Ω–∞ —É—Ä–æ–∫–∞—Ö üìà, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüìñ,|| —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—åü§©||, –∏ –∑–∞–ø—Ä–µ—â–∞—Ç—å –≤–∞–º —Å–∫—É—á–∞—Ç—åüòÅ\\. –î–∞–≤–∞–π—Ç–µ –∂–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä _—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤_\\!*üöÄ",
			{
				parse_mode: "MarkdownV2",
			}
		)
		.then((message) => {
			messageId_sayHi2Home = message.message_id;
		});

	await bot.sendMessage(chatId, "„Ö§").then((message) => {
		messageId_sayHi3Home = message.message_id;
	});
	if (quickStart) {
		menuHome(chatId, false);
		className = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
	} else if (!quickStart) {
		ChoosingClass(chatId);
	}
}

async function StartAll() {
	// bot.sendMessage(userId, "..."); //?                                                         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ª–∏—Ü—É.

	bot.on("message", async (message) => {
		const chatId = message.chat.id;

		if (chatId == qu1z3x) {
			admin = true;
		} else {
			admin = false;
		}

		messageId_user = message.message_id;
		const text = message.text;
		firstName = message.from.first_name;

		// –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		let date = new Date(message.date * 1000),
			d = date.getDay() - 1,
			h = date.getHours(),
			m = date.getMinutes(),
			s = date.getSeconds(),
			time = `${String(h).padStart(2, "0")}:${String(m).padStart(
				2,
				"0"
			)}:${String(s).padStart(2, "0")}`;

		//* –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
		console.log(
			`\n${time} ${weekDayNames[d]} | text | ${message.from.first_name} ${message.from.username} <${chatId}>  -  "${text}"`
		);

		//? –ö–û–ú–ê–ù–î–´

		switch (text) {
			case "/start":
				start(chatId, message.from.first_name);
				break;
			case "st":
				start(chatId, message.from.first_name, true);
				break;

			case "/restart":
				try {
					await bot.deleteMessage(chatId, messageId_menuHome);
				} catch (error) {}
				bot.deleteMessage(chatId, messageId_user);
				menuHome(chatId, false);
				break;
			default:
				try {
					await bot.deleteMessage(chatId, messageId_user);
				} catch (error) {
					console.log("\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞(");
				}
				break;
		}
	});

	//? –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–î –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò

	bot.on("callback_query", (query) => {
		const chatId = query.message.chat.id;
		firstName = query.from.first_name;

		if (chatId == "923690530") {
			admin = true;
		} else {
			admin = false;
		}

		const data = query.data;
		messageId_menuHome = query.message.message_id;

		// –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		let hintText,
			date = new Date(),
			d = date.getDay() - 1,
			h = date.getHours(),
			m = date.getMinutes(),
			s = date.getSeconds(),
			time = `${String(h).padStart(2, "0")}:${String(m).padStart(
				2,
				"0"
			)}:${String(s).padStart(2, "0")}`;

		//* –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
		console.log(
			`\n${time} ${weekDayNames[d]} | button | ${query.from.first_name} ${query.from.username} <${chatId}>  -  [${data}]`
		);

		if (data == rndNum) {
			bot.editMessageText(
				`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ ${rndNum}\\!ü•≥ \n\n–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞??*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game1" },
							],
						],
					},
				}
			);
		} else if (
			data == "0" ||
			data == "1" ||
			data == "2" ||
			data == "3" ||
			data == "4" ||
			data == "5" ||
			data == "6" ||
			data == "7" ||
			data == "8" ||
			data == "9"
		) {
			bot.editMessageText(
				`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî\n–û—Ç–≤–µ—Ç: ${rndNum}\\! \n\n–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞??*`,
				{
					parse_mode: "MarkdownV2",
					chat_id: chatId,
					message_id: messageId_menuHome,
					reply_markup: {
						inline_keyboard: [
							[
								{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "games" },
								{ text: "–î–∞–≤–∞–πüëå", callback_data: "game1" },
							],
						],
					},
				}
			);
		} else if (data == "hint") {
			if (rndNum <= 5) {
				hintText = `–ß–∏—Å–ª–æ _–º–µ–Ω—å—à–µ_ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5\\! üìâüòâ`;
			} else if (rndNum >= 5) {
				hintText = `–ß–∏—Å–ª–æ _–±–æ–ª—å—à–µ_ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5\\! üìàüòâ`;
			}
			bot.editMessageText(`*_‚ùì–£–≥–∞–¥–∞–π–∫–∞‚ùì_\n\n${hintText}*`, {
				parse_mode: "MarkdownV2",
				chat_id: chatId,
				message_id: messageId_menuHome,
			});
			setTimeout(() => {
				game1(chatId, false);
			}, 1500);
		}

		switch (data) {
			//? –ö–õ–ê–°–°–´/–†–ê–°–ü–ò–°–ê–ù–ò–ï

			case "10g":
				className = "10–ì";
				menuHome(chatId);
				break;
			case "11d":
				className = "11–î";
				menuHome(chatId);
				break;
			case "11g":
				className = "11–ì";
				menuHome(chatId);
				break;
			case "11a":
				className = "11–ê";
				menuHome(chatId);
				break;
			case "11v":
				className = "11–í";
				menuHome(chatId);
				break;

			//? –î–ï–ù–¨ –ù–ï–î–ï–õ–ò

			case "mon":
				weekday = 0;
				RaspisanieText(chatId);
				break;
			case "tue":
				weekday = 1;
				RaspisanieText(chatId);
				break;
			case "wen":
				weekday = 2;
				RaspisanieText(chatId);
				break;
			case "thu":
				weekday = 3;
				RaspisanieText(chatId);
				break;
			case "fri":
				weekday = 4;
				RaspisanieText(chatId);
				break;
			case "today":
				weekday = d;
				RaspisanieText(chatId);
				break;
			case "tomorrow":
				weekday = d + 1;
				RaspisanieText(chatId);
				break;

			//? –î–ï–ô–°–¢–í–ò–Ø –ö–ù–û–ü–û–ö

			case "exit":
				try {
					menuHome(chatId);
				} catch (error) {
					menuHome(chatId, false);
				}
				break;
			// RASPISANIE
			case "chooseclass":
				ChoosingClass(chatId, true);
				break;
			case "raspisanie":
				Raspisanie(chatId);
				break;
			case "netclassa":
				netClassaText(chatId);
				break;

			// CALLS
			case "calls":
				Calls(chatId);
				break;

			// GAMES
			case "games":
				Games(chatId);
				break;
			// game1
			case "game1":
				game1(chatId);
				break;
			// game2
			case "game2":
				game2(chatId);
				break;
			case "stone":
				game2_2(chatId, 1);
				break;
			case "scissors":
				game2_2(chatId, 2);
				break;
			case "paper":
				game2_2(chatId, 3);
				break;

			// NEWS (What's new)
			case "news":
				News(chatId);
				break;
			case "botnews":
				if (newsNum != 0) {
					newsNum = 0;
					News(chatId);
				}

				break;
			case "schoolnews":
				if (newsNum != 1) {
					newsNum = 1;
					News(chatId);
				}
				break;
			// OPTIONS
			case "options":
				Options(chatId, firstName);
				break;
			// ADMINMENU
			case "adminMenu":
				adminMenu(chatId);
				break;
			default:
				break;
		}
	});
}
StartAll();
